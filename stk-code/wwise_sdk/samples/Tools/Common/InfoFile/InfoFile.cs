// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.0.0.47. www.xsd2code.com
//    <NameSpace>AK.Wwise.InfoFile</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net40</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>None</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace AK.Wwise.InfoFile
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class SoundBanksInfo
    {

        #region Private fields
        private SoundBanksInfoRootPaths rootPathsField;

        private SoundBanksInfoDialogueEvents dialogueEventsField;

        private SoundBanksInfoStreamedFiles streamedFilesField;

        private SoundBanksInfoMediaFilesNotInAnyBank mediaFilesNotInAnyBankField;

        private SoundBanksInfoSoundBanks soundBanksField;

        private string platformField;

        private SoundBanksInfoBasePlatform basePlatformField;

        private uint schemaVersionField;

        private uint soundbankVersionField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfo()
        {
            this.soundBanksField = new SoundBanksInfoSoundBanks();
            this.mediaFilesNotInAnyBankField = new SoundBanksInfoMediaFilesNotInAnyBank();
            this.streamedFilesField = new SoundBanksInfoStreamedFiles();
            this.dialogueEventsField = new SoundBanksInfoDialogueEvents();
            this.rootPathsField = new SoundBanksInfoRootPaths();
        }

        public SoundBanksInfoRootPaths RootPaths
        {
            get
            {
                return this.rootPathsField;
            }
            set
            {
                this.rootPathsField = value;
            }
        }

        public SoundBanksInfoDialogueEvents DialogueEvents
        {
            get
            {
                return this.dialogueEventsField;
            }
            set
            {
                this.dialogueEventsField = value;
            }
        }

        public SoundBanksInfoStreamedFiles StreamedFiles
        {
            get
            {
                return this.streamedFilesField;
            }
            set
            {
                this.streamedFilesField = value;
            }
        }

        public SoundBanksInfoMediaFilesNotInAnyBank MediaFilesNotInAnyBank
        {
            get
            {
                return this.mediaFilesNotInAnyBankField;
            }
            set
            {
                this.mediaFilesNotInAnyBankField = value;
            }
        }

        public SoundBanksInfoSoundBanks SoundBanks
        {
            get
            {
                return this.soundBanksField;
            }
            set
            {
                this.soundBanksField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Platform
        {
            get
            {
                return this.platformField;
            }
            set
            {
                this.platformField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public SoundBanksInfoBasePlatform BasePlatform
        {
            get
            {
                return this.basePlatformField;
            }
            set
            {
                this.basePlatformField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint SchemaVersion
        {
            get
            {
                return this.schemaVersionField;
            }
            set
            {
                this.schemaVersionField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint SoundbankVersion
        {
            get
            {
                return this.soundbankVersionField;
            }
            set
            {
                this.soundbankVersionField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfo));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfo object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfo object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfo);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfo obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfo Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfo)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfo Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfo)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfo);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfo obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfo LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoRootPaths
    {

        #region Private fields
        private string projectRootField;

        private string sourceFilesRootField;

        private string soundBanksRootField;

        private string externalSourcesInputFileField;

        private string externalSourcesOutputRootField;

        private static XmlSerializer serializer;
        #endregion

        public string ProjectRoot
        {
            get
            {
                return this.projectRootField;
            }
            set
            {
                this.projectRootField = value;
            }
        }

        public string SourceFilesRoot
        {
            get
            {
                return this.sourceFilesRootField;
            }
            set
            {
                this.sourceFilesRootField = value;
            }
        }

        public string SoundBanksRoot
        {
            get
            {
                return this.soundBanksRootField;
            }
            set
            {
                this.soundBanksRootField = value;
            }
        }

        public string ExternalSourcesInputFile
        {
            get
            {
                return this.externalSourcesInputFileField;
            }
            set
            {
                this.externalSourcesInputFileField = value;
            }
        }

        public string ExternalSourcesOutputRoot
        {
            get
            {
                return this.externalSourcesOutputRootField;
            }
            set
            {
                this.externalSourcesOutputRootField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoRootPaths));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoRootPaths object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoRootPaths object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoRootPaths object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoRootPaths obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoRootPaths);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoRootPaths obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoRootPaths Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoRootPaths)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoRootPaths Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoRootPaths)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoRootPaths object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoRootPaths object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoRootPaths object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoRootPaths obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoRootPaths);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoRootPaths obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoRootPaths LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SwitchContainerType
    {

        #region Private fields
        private SwitchContainerTypeMedia mediaField;

        private SwitchContainerTypeChildren childrenField;

        private string switchValueField;

        private static XmlSerializer serializer;
        #endregion

        public SwitchContainerType()
        {
            this.childrenField = new SwitchContainerTypeChildren();
            this.mediaField = new SwitchContainerTypeMedia();
        }

        public SwitchContainerTypeMedia Media
        {
            get
            {
                return this.mediaField;
            }
            set
            {
                this.mediaField = value;
            }
        }

        public SwitchContainerTypeChildren Children
        {
            get
            {
                return this.childrenField;
            }
            set
            {
                this.childrenField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SwitchValue
        {
            get
            {
                return this.switchValueField;
            }
            set
            {
                this.switchValueField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SwitchContainerType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SwitchContainerType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SwitchContainerType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SwitchContainerType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SwitchContainerType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SwitchContainerType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SwitchContainerType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SwitchContainerType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SwitchContainerType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SwitchContainerType Deserialize(System.IO.Stream s)
        {
            return ((SwitchContainerType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SwitchContainerType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SwitchContainerType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SwitchContainerType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SwitchContainerType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SwitchContainerType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SwitchContainerType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SwitchContainerType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SwitchContainerTypeMedia
    {

        #region Private fields
        private List<SwitchContainerTypeMediaFile> fileField;

        private static XmlSerializer serializer;
        #endregion

        public SwitchContainerTypeMedia()
        {
            this.fileField = new List<SwitchContainerTypeMediaFile>();
        }

        [System.Xml.Serialization.XmlElementAttribute("File")]
        public List<SwitchContainerTypeMediaFile> File
        {
            get
            {
                return this.fileField;
            }
            set
            {
                this.fileField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SwitchContainerTypeMedia));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SwitchContainerTypeMedia object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SwitchContainerTypeMedia object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SwitchContainerTypeMedia object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SwitchContainerTypeMedia obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SwitchContainerTypeMedia);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SwitchContainerTypeMedia obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SwitchContainerTypeMedia Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SwitchContainerTypeMedia)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SwitchContainerTypeMedia Deserialize(System.IO.Stream s)
        {
            return ((SwitchContainerTypeMedia)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SwitchContainerTypeMedia object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SwitchContainerTypeMedia object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SwitchContainerTypeMedia object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SwitchContainerTypeMedia obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SwitchContainerTypeMedia);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SwitchContainerTypeMedia obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SwitchContainerTypeMedia LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SwitchContainerTypeMediaFile
    {

        #region Private fields
        private uint idField;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SwitchContainerTypeMediaFile));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SwitchContainerTypeMediaFile object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SwitchContainerTypeMediaFile object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SwitchContainerTypeMediaFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SwitchContainerTypeMediaFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SwitchContainerTypeMediaFile);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SwitchContainerTypeMediaFile obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SwitchContainerTypeMediaFile Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SwitchContainerTypeMediaFile)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SwitchContainerTypeMediaFile Deserialize(System.IO.Stream s)
        {
            return ((SwitchContainerTypeMediaFile)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SwitchContainerTypeMediaFile object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SwitchContainerTypeMediaFile object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SwitchContainerTypeMediaFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SwitchContainerTypeMediaFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SwitchContainerTypeMediaFile);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SwitchContainerTypeMediaFile obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SwitchContainerTypeMediaFile LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SwitchContainerTypeChildren
    {

        #region Private fields
        private List<SwitchContainerTypeChildrenSwitchContainer> switchContainerField;

        private static XmlSerializer serializer;
        #endregion

        public SwitchContainerTypeChildren()
        {
            this.switchContainerField = new List<SwitchContainerTypeChildrenSwitchContainer>();
        }

        [System.Xml.Serialization.XmlElementAttribute("SwitchContainer")]
        public List<SwitchContainerTypeChildrenSwitchContainer> SwitchContainer
        {
            get
            {
                return this.switchContainerField;
            }
            set
            {
                this.switchContainerField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SwitchContainerTypeChildren));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SwitchContainerTypeChildren object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SwitchContainerTypeChildren object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SwitchContainerTypeChildren object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SwitchContainerTypeChildren obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SwitchContainerTypeChildren);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SwitchContainerTypeChildren obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SwitchContainerTypeChildren Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SwitchContainerTypeChildren)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SwitchContainerTypeChildren Deserialize(System.IO.Stream s)
        {
            return ((SwitchContainerTypeChildren)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SwitchContainerTypeChildren object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SwitchContainerTypeChildren object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SwitchContainerTypeChildren object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SwitchContainerTypeChildren obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SwitchContainerTypeChildren);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SwitchContainerTypeChildren obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SwitchContainerTypeChildren LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SwitchContainerTypeChildrenSwitchContainer : SwitchContainerType
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SwitchContainerTypeChildrenSwitchContainer));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SwitchContainerTypeChildrenSwitchContainer object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SwitchContainerTypeChildrenSwitchContainer object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SwitchContainerTypeChildrenSwitchContainer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SwitchContainerTypeChildrenSwitchContainer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SwitchContainerTypeChildrenSwitchContainer);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SwitchContainerTypeChildrenSwitchContainer obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SwitchContainerTypeChildrenSwitchContainer Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SwitchContainerTypeChildrenSwitchContainer)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SwitchContainerTypeChildrenSwitchContainer Deserialize(System.IO.Stream s)
        {
            return ((SwitchContainerTypeChildrenSwitchContainer)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SwitchContainerTypeChildrenSwitchContainer object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SwitchContainerTypeChildrenSwitchContainer object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SwitchContainerTypeChildrenSwitchContainer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SwitchContainerTypeChildrenSwitchContainer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SwitchContainerTypeChildrenSwitchContainer);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SwitchContainerTypeChildrenSwitchContainer obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SwitchContainerTypeChildrenSwitchContainer LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FilesReferenceType
    {

        #region Private fields
        private List<FilesReferenceTypeFile> fileField;

        private static XmlSerializer serializer;
        #endregion

        public FilesReferenceType()
        {
            this.fileField = new List<FilesReferenceTypeFile>();
        }

        [System.Xml.Serialization.XmlElementAttribute("File")]
        public List<FilesReferenceTypeFile> File
        {
            get
            {
                return this.fileField;
            }
            set
            {
                this.fileField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(FilesReferenceType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FilesReferenceType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an FilesReferenceType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output FilesReferenceType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out FilesReferenceType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FilesReferenceType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out FilesReferenceType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static FilesReferenceType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((FilesReferenceType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static FilesReferenceType Deserialize(System.IO.Stream s)
        {
            return ((FilesReferenceType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current FilesReferenceType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an FilesReferenceType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FilesReferenceType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FilesReferenceType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FilesReferenceType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out FilesReferenceType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static FilesReferenceType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class FilesReferenceTypeFile : StandinFileDescriptorType
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(FilesReferenceTypeFile));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FilesReferenceTypeFile object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an FilesReferenceTypeFile object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output FilesReferenceTypeFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out FilesReferenceTypeFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FilesReferenceTypeFile);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out FilesReferenceTypeFile obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static FilesReferenceTypeFile Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((FilesReferenceTypeFile)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static FilesReferenceTypeFile Deserialize(System.IO.Stream s)
        {
            return ((FilesReferenceTypeFile)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current FilesReferenceTypeFile object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an FilesReferenceTypeFile object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FilesReferenceTypeFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FilesReferenceTypeFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FilesReferenceTypeFile);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out FilesReferenceTypeFile obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static FilesReferenceTypeFile LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StreamedFileDescriptorType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StandinFileDescriptorType : FileDescriptorType
    {

        #region Private fields
        private bool usingReferenceLanguageAsStandInField;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool UsingReferenceLanguageAsStandIn
        {
            get
            {
                return this.usingReferenceLanguageAsStandInField;
            }
            set
            {
                this.usingReferenceLanguageAsStandInField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(StandinFileDescriptorType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current StandinFileDescriptorType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an StandinFileDescriptorType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output StandinFileDescriptorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out StandinFileDescriptorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(StandinFileDescriptorType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out StandinFileDescriptorType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static StandinFileDescriptorType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((StandinFileDescriptorType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static StandinFileDescriptorType Deserialize(System.IO.Stream s)
        {
            return ((StandinFileDescriptorType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current StandinFileDescriptorType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an StandinFileDescriptorType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output StandinFileDescriptorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out StandinFileDescriptorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(StandinFileDescriptorType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out StandinFileDescriptorType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static StandinFileDescriptorType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandinFileDescriptorType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StreamedFileDescriptorType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileDescriptorType
    {

        #region Private fields
        private string objectPathField;

        private string shortNameField;

        private string pathField;

        private System.Nullable<uint> prefetchSizeField;

        private System.Nullable<bool> useDeviceMemoryField;

        private uint idField;

        private string languageField;

        private string gUIDField;

        private static XmlSerializer serializer;
        #endregion

        public string ObjectPath
        {
            get
            {
                return this.objectPathField;
            }
            set
            {
                this.objectPathField = value;
            }
        }

        public string ShortName
        {
            get
            {
                return this.shortNameField;
            }
            set
            {
                this.shortNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<uint> PrefetchSize
        {
            get
            {
                return this.prefetchSizeField;
            }
            set
            {
                this.prefetchSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> UseDeviceMemory
        {
            get
            {
                return this.useDeviceMemoryField;
            }
            set
            {
                this.useDeviceMemoryField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Language
        {
            get
            {
                return this.languageField;
            }
            set
            {
                this.languageField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string GUID
        {
            get
            {
                return this.gUIDField;
            }
            set
            {
                this.gUIDField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(FileDescriptorType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FileDescriptorType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an FileDescriptorType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output FileDescriptorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out FileDescriptorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FileDescriptorType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out FileDescriptorType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static FileDescriptorType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((FileDescriptorType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static FileDescriptorType Deserialize(System.IO.Stream s)
        {
            return ((FileDescriptorType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current FileDescriptorType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an FileDescriptorType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FileDescriptorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FileDescriptorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FileDescriptorType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out FileDescriptorType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static FileDescriptorType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StreamedFileDescriptorType : StandinFileDescriptorType
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(StreamedFileDescriptorType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current StreamedFileDescriptorType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an StreamedFileDescriptorType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output StreamedFileDescriptorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out StreamedFileDescriptorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(StreamedFileDescriptorType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out StreamedFileDescriptorType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static StreamedFileDescriptorType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((StreamedFileDescriptorType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static StreamedFileDescriptorType Deserialize(System.IO.Stream s)
        {
            return ((StreamedFileDescriptorType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current StreamedFileDescriptorType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an StreamedFileDescriptorType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output StreamedFileDescriptorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out StreamedFileDescriptorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(StreamedFileDescriptorType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out StreamedFileDescriptorType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static StreamedFileDescriptorType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StreamedFilesReferenceType
    {

        #region Private fields
        private List<StreamedFilesReferenceTypeFile> fileField;

        private static XmlSerializer serializer;
        #endregion

        public StreamedFilesReferenceType()
        {
            this.fileField = new List<StreamedFilesReferenceTypeFile>();
        }

        [System.Xml.Serialization.XmlElementAttribute("File")]
        public List<StreamedFilesReferenceTypeFile> File
        {
            get
            {
                return this.fileField;
            }
            set
            {
                this.fileField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(StreamedFilesReferenceType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current StreamedFilesReferenceType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an StreamedFilesReferenceType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output StreamedFilesReferenceType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out StreamedFilesReferenceType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(StreamedFilesReferenceType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out StreamedFilesReferenceType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static StreamedFilesReferenceType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((StreamedFilesReferenceType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static StreamedFilesReferenceType Deserialize(System.IO.Stream s)
        {
            return ((StreamedFilesReferenceType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current StreamedFilesReferenceType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an StreamedFilesReferenceType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output StreamedFilesReferenceType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out StreamedFilesReferenceType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(StreamedFilesReferenceType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out StreamedFilesReferenceType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static StreamedFilesReferenceType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class StreamedFilesReferenceTypeFile : StreamedFileDescriptorType
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(StreamedFilesReferenceTypeFile));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current StreamedFilesReferenceTypeFile object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an StreamedFilesReferenceTypeFile object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output StreamedFilesReferenceTypeFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out StreamedFilesReferenceTypeFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(StreamedFilesReferenceTypeFile);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out StreamedFilesReferenceTypeFile obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static StreamedFilesReferenceTypeFile Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((StreamedFilesReferenceTypeFile)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static StreamedFilesReferenceTypeFile Deserialize(System.IO.Stream s)
        {
            return ((StreamedFilesReferenceTypeFile)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current StreamedFilesReferenceTypeFile object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an StreamedFilesReferenceTypeFile object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output StreamedFilesReferenceTypeFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out StreamedFilesReferenceTypeFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(StreamedFilesReferenceTypeFile);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out StreamedFilesReferenceTypeFile obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static StreamedFilesReferenceTypeFile LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NameID
    {

        #region Private fields
        private uint idField;

        private string nameField;

        private string objectPathField;

        private string gUIDField;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ObjectPath
        {
            get
            {
                return this.objectPathField;
            }
            set
            {
                this.objectPathField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string GUID
        {
            get
            {
                return this.gUIDField;
            }
            set
            {
                this.gUIDField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(NameID));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NameID object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an NameID object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output NameID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out NameID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(NameID);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out NameID obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static NameID Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((NameID)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static NameID Deserialize(System.IO.Stream s)
        {
            return ((NameID)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current NameID object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an NameID object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NameID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out NameID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(NameID);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out NameID obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static NameID LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoDialogueEvents
    {

        #region Private fields
        private List<SoundBanksInfoDialogueEventsDialogueEvent> dialogueEventField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoDialogueEvents()
        {
            this.dialogueEventField = new List<SoundBanksInfoDialogueEventsDialogueEvent>();
        }

        [System.Xml.Serialization.XmlElementAttribute("DialogueEvent")]
        public List<SoundBanksInfoDialogueEventsDialogueEvent> DialogueEvent
        {
            get
            {
                return this.dialogueEventField;
            }
            set
            {
                this.dialogueEventField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoDialogueEvents));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoDialogueEvents object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoDialogueEvents object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoDialogueEvents object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoDialogueEvents obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoDialogueEvents);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoDialogueEvents obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoDialogueEvents Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoDialogueEvents)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoDialogueEvents Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoDialogueEvents)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoDialogueEvents object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoDialogueEvents object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoDialogueEvents object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoDialogueEvents obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoDialogueEvents);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoDialogueEvents obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoDialogueEvents LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoDialogueEventsDialogueEvent : NameID
    {

        #region Private fields
        private List<NameID> argumentField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoDialogueEventsDialogueEvent()
        {
            this.argumentField = new List<NameID>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Argument")]
        public List<NameID> Argument
        {
            get
            {
                return this.argumentField;
            }
            set
            {
                this.argumentField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoDialogueEventsDialogueEvent));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoDialogueEventsDialogueEvent object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoDialogueEventsDialogueEvent object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoDialogueEventsDialogueEvent object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoDialogueEventsDialogueEvent obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoDialogueEventsDialogueEvent);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoDialogueEventsDialogueEvent obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoDialogueEventsDialogueEvent Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoDialogueEventsDialogueEvent)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoDialogueEventsDialogueEvent Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoDialogueEventsDialogueEvent)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoDialogueEventsDialogueEvent object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoDialogueEventsDialogueEvent object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoDialogueEventsDialogueEvent object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoDialogueEventsDialogueEvent obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoDialogueEventsDialogueEvent);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoDialogueEventsDialogueEvent obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoDialogueEventsDialogueEvent LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoStreamedFiles : StreamedFilesReferenceType
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoStreamedFiles));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoStreamedFiles object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoStreamedFiles object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoStreamedFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoStreamedFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoStreamedFiles);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoStreamedFiles obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoStreamedFiles Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoStreamedFiles)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoStreamedFiles Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoStreamedFiles)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoStreamedFiles object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoStreamedFiles object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoStreamedFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoStreamedFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoStreamedFiles);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoStreamedFiles obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoStreamedFiles LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoMediaFilesNotInAnyBank
    {

        #region Private fields
        private List<SoundBanksInfoMediaFilesNotInAnyBankFile> fileField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoMediaFilesNotInAnyBank()
        {
            this.fileField = new List<SoundBanksInfoMediaFilesNotInAnyBankFile>();
        }

        [System.Xml.Serialization.XmlElementAttribute("File")]
        public List<SoundBanksInfoMediaFilesNotInAnyBankFile> File
        {
            get
            {
                return this.fileField;
            }
            set
            {
                this.fileField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoMediaFilesNotInAnyBank));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoMediaFilesNotInAnyBank object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoMediaFilesNotInAnyBank object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoMediaFilesNotInAnyBank object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoMediaFilesNotInAnyBank obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoMediaFilesNotInAnyBank);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoMediaFilesNotInAnyBank obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoMediaFilesNotInAnyBank Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoMediaFilesNotInAnyBank)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoMediaFilesNotInAnyBank Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoMediaFilesNotInAnyBank)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoMediaFilesNotInAnyBank object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoMediaFilesNotInAnyBank object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoMediaFilesNotInAnyBank object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoMediaFilesNotInAnyBank obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoMediaFilesNotInAnyBank);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoMediaFilesNotInAnyBank obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoMediaFilesNotInAnyBank LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoMediaFilesNotInAnyBankFile : FileDescriptorType
    {

        #region Private fields
        private bool usingReferenceLanguageAsStandInField;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool UsingReferenceLanguageAsStandIn
        {
            get
            {
                return this.usingReferenceLanguageAsStandInField;
            }
            set
            {
                this.usingReferenceLanguageAsStandInField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoMediaFilesNotInAnyBankFile));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoMediaFilesNotInAnyBankFile object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoMediaFilesNotInAnyBankFile object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoMediaFilesNotInAnyBankFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoMediaFilesNotInAnyBankFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoMediaFilesNotInAnyBankFile);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoMediaFilesNotInAnyBankFile obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoMediaFilesNotInAnyBankFile Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoMediaFilesNotInAnyBankFile)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoMediaFilesNotInAnyBankFile Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoMediaFilesNotInAnyBankFile)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoMediaFilesNotInAnyBankFile object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoMediaFilesNotInAnyBankFile object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoMediaFilesNotInAnyBankFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoMediaFilesNotInAnyBankFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoMediaFilesNotInAnyBankFile);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoMediaFilesNotInAnyBankFile obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoMediaFilesNotInAnyBankFile LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanks
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBank> soundBankField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanks()
        {
            this.soundBankField = new List<SoundBanksInfoSoundBanksSoundBank>();
        }

        [System.Xml.Serialization.XmlElementAttribute("SoundBank")]
        public List<SoundBanksInfoSoundBanksSoundBank> SoundBank
        {
            get
            {
                return this.soundBankField;
            }
            set
            {
                this.soundBankField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanks));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanks object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanks object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanks object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanks obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanks);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanks obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanks Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanks)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanks Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanks)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanks object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanks object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanks object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanks obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanks);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanks obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanks LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBank : FileDescriptorType
    {

        #region Private fields
        private SoundBanksInfoSoundBanksSoundBankIncludedEvents includedEventsField;

        private SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents includedDialogueEventsField;

        private SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses includedAuxBussesField;

        private SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles referencedStreamedFilesField;

        private SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles includedMemoryFilesField;

        private SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles excludedMemoryFilesField;

        private SoundBanksInfoSoundBanksSoundBankGameParameters gameParametersField;

        private SoundBanksInfoSoundBanksSoundBankStateGroups stateGroupsField;

        private SoundBanksInfoSoundBanksSoundBankSwitchGroups switchGroupsField;

        private SoundBanksInfoSoundBanksSoundBankTriggers triggersField;

        private SoundBanksInfoSoundBanksSoundBankExternalSources externalSourcesField;

        private uint alignField;

        private bool deviceMemoryField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBank()
        {
            this.externalSourcesField = new SoundBanksInfoSoundBanksSoundBankExternalSources();
            this.triggersField = new SoundBanksInfoSoundBanksSoundBankTriggers();
            this.switchGroupsField = new SoundBanksInfoSoundBanksSoundBankSwitchGroups();
            this.stateGroupsField = new SoundBanksInfoSoundBanksSoundBankStateGroups();
            this.gameParametersField = new SoundBanksInfoSoundBanksSoundBankGameParameters();
            this.excludedMemoryFilesField = new SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles();
            this.includedMemoryFilesField = new SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles();
            this.referencedStreamedFilesField = new SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles();
            this.includedAuxBussesField = new SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses();
            this.includedDialogueEventsField = new SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents();
            this.includedEventsField = new SoundBanksInfoSoundBanksSoundBankIncludedEvents();
        }

        public SoundBanksInfoSoundBanksSoundBankIncludedEvents IncludedEvents
        {
            get
            {
                return this.includedEventsField;
            }
            set
            {
                this.includedEventsField = value;
            }
        }

        public SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents IncludedDialogueEvents
        {
            get
            {
                return this.includedDialogueEventsField;
            }
            set
            {
                this.includedDialogueEventsField = value;
            }
        }

        public SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses IncludedAuxBusses
        {
            get
            {
                return this.includedAuxBussesField;
            }
            set
            {
                this.includedAuxBussesField = value;
            }
        }

        public SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles ReferencedStreamedFiles
        {
            get
            {
                return this.referencedStreamedFilesField;
            }
            set
            {
                this.referencedStreamedFilesField = value;
            }
        }

        public SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles IncludedMemoryFiles
        {
            get
            {
                return this.includedMemoryFilesField;
            }
            set
            {
                this.includedMemoryFilesField = value;
            }
        }

        public SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles ExcludedMemoryFiles
        {
            get
            {
                return this.excludedMemoryFilesField;
            }
            set
            {
                this.excludedMemoryFilesField = value;
            }
        }

        public SoundBanksInfoSoundBanksSoundBankGameParameters GameParameters
        {
            get
            {
                return this.gameParametersField;
            }
            set
            {
                this.gameParametersField = value;
            }
        }

        public SoundBanksInfoSoundBanksSoundBankStateGroups StateGroups
        {
            get
            {
                return this.stateGroupsField;
            }
            set
            {
                this.stateGroupsField = value;
            }
        }

        public SoundBanksInfoSoundBanksSoundBankSwitchGroups SwitchGroups
        {
            get
            {
                return this.switchGroupsField;
            }
            set
            {
                this.switchGroupsField = value;
            }
        }

        public SoundBanksInfoSoundBanksSoundBankTriggers Triggers
        {
            get
            {
                return this.triggersField;
            }
            set
            {
                this.triggersField = value;
            }
        }

        public SoundBanksInfoSoundBanksSoundBankExternalSources ExternalSources
        {
            get
            {
                return this.externalSourcesField;
            }
            set
            {
                this.externalSourcesField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint Align
        {
            get
            {
                return this.alignField;
            }
            set
            {
                this.alignField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DeviceMemory
        {
            get
            {
                return this.deviceMemoryField;
            }
            set
            {
                this.deviceMemoryField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBank));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBank object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBank object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBank object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBank obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBank);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBank obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBank Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBank)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBank Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBank)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBank object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBank object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBank object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBank obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBank);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBank obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBank LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankIncludedEvents
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent> eventField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankIncludedEvents()
        {
            this.eventField = new List<SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Event")]
        public List<SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent> Event
        {
            get
            {
                return this.eventField;
            }
            set
            {
                this.eventField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankIncludedEvents));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEvents object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankIncludedEvents object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEvents object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEvents obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEvents);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEvents obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedEvents Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankIncludedEvents)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedEvents Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankIncludedEvents)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEvents object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankIncludedEvents object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEvents object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEvents obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEvents);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEvents obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedEvents LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent : NameID
    {

        #region Private fields
        private SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles referencedStreamedFilesField;

        private SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles includedMemoryFilesField;

        private SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles excludedMemoryFilesField;

        private SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers switchContainersField;

        private double maxAttenuationField;

        private string durationTypeField;

        private string durationMinField;

        private string durationMaxField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent()
        {
            this.switchContainersField = new SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers();
            this.excludedMemoryFilesField = new SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles();
            this.includedMemoryFilesField = new SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles();
            this.referencedStreamedFilesField = new SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles();
        }

        public SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles ReferencedStreamedFiles
        {
            get
            {
                return this.referencedStreamedFilesField;
            }
            set
            {
                this.referencedStreamedFilesField = value;
            }
        }

        public SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles IncludedMemoryFiles
        {
            get
            {
                return this.includedMemoryFilesField;
            }
            set
            {
                this.includedMemoryFilesField = value;
            }
        }

        public SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles ExcludedMemoryFiles
        {
            get
            {
                return this.excludedMemoryFilesField;
            }
            set
            {
                this.excludedMemoryFilesField = value;
            }
        }

        public SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers SwitchContainers
        {
            get
            {
                return this.switchContainersField;
            }
            set
            {
                this.switchContainersField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double MaxAttenuation
        {
            get
            {
                return this.maxAttenuationField;
            }
            set
            {
                this.maxAttenuationField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DurationType
        {
            get
            {
                return this.durationTypeField;
            }
            set
            {
                this.durationTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DurationMin
        {
            get
            {
                return this.durationMinField;
            }
            set
            {
                this.durationMinField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DurationMax
        {
            get
            {
                return this.durationMaxField;
            }
            set
            {
                this.durationMaxField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles : StreamedFilesReferenceType
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventReferencedStreamedFiles LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles : FilesReferenceType
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventIncludedMemoryFiles LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles : FilesReferenceType
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventExcludedMemoryFiles LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer> switchContainerField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers()
        {
            this.switchContainerField = new List<SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer>();
        }

        [System.Xml.Serialization.XmlElementAttribute("SwitchContainer")]
        public List<SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer> SwitchContainer
        {
            get
            {
                return this.switchContainerField;
            }
            set
            {
                this.switchContainerField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainers LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer : SwitchContainerType
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedEventsEventSwitchContainersSwitchContainer LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent> dialogueEventField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents()
        {
            this.dialogueEventField = new List<SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent>();
        }

        [System.Xml.Serialization.XmlElementAttribute("DialogueEvent")]
        public List<SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent> DialogueEvent
        {
            get
            {
                return this.dialogueEventField;
            }
            set
            {
                this.dialogueEventField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedDialogueEvents LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent : NameID
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedDialogueEventsDialogueEvent LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus> auxBusField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses()
        {
            this.auxBusField = new List<SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus>();
        }

        [System.Xml.Serialization.XmlElementAttribute("AuxBus")]
        public List<SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus> AuxBus
        {
            get
            {
                return this.auxBusField;
            }
            set
            {
                this.auxBusField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedAuxBusses LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus : NameID
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedAuxBussesAuxBus LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles : StreamedFilesReferenceType
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankReferencedStreamedFiles LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile> fileField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles()
        {
            this.fileField = new List<SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile>();
        }

        [System.Xml.Serialization.XmlElementAttribute("File")]
        public List<SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile> File
        {
            get
            {
                return this.fileField;
            }
            set
            {
                this.fileField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedMemoryFiles LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile : FileDescriptorType
    {

        #region Private fields
        private bool usingReferenceLanguageAsStandInField;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool UsingReferenceLanguageAsStandIn
        {
            get
            {
                return this.usingReferenceLanguageAsStandInField;
            }
            set
            {
                this.usingReferenceLanguageAsStandInField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankIncludedMemoryFilesFile LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile> fileField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles()
        {
            this.fileField = new List<SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile>();
        }

        [System.Xml.Serialization.XmlElementAttribute("File")]
        public List<SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile> File
        {
            get
            {
                return this.fileField;
            }
            set
            {
                this.fileField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankExcludedMemoryFiles LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile : FileDescriptorType
    {

        #region Private fields
        private bool usingReferenceLanguageAsStandInField;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool UsingReferenceLanguageAsStandIn
        {
            get
            {
                return this.usingReferenceLanguageAsStandInField;
            }
            set
            {
                this.usingReferenceLanguageAsStandInField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankExcludedMemoryFilesFile LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankGameParameters
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter> gameParameterField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankGameParameters()
        {
            this.gameParameterField = new List<SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter>();
        }

        [System.Xml.Serialization.XmlElementAttribute("GameParameter")]
        public List<SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter> GameParameter
        {
            get
            {
                return this.gameParameterField;
            }
            set
            {
                this.gameParameterField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankGameParameters));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankGameParameters object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankGameParameters object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankGameParameters object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankGameParameters obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankGameParameters);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankGameParameters obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankGameParameters Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankGameParameters)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankGameParameters Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankGameParameters)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankGameParameters object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankGameParameters object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankGameParameters object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankGameParameters obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankGameParameters);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankGameParameters obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankGameParameters LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter : NameID
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankGameParametersGameParameter LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankStateGroups
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup> stateGroupField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankStateGroups()
        {
            this.stateGroupField = new List<SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup>();
        }

        [System.Xml.Serialization.XmlElementAttribute("StateGroup")]
        public List<SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup> StateGroup
        {
            get
            {
                return this.stateGroupField;
            }
            set
            {
                this.stateGroupField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankStateGroups));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankStateGroups object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankStateGroups object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankStateGroups object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankStateGroups obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankStateGroups);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankStateGroups obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankStateGroups Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankStateGroups)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankStateGroups Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankStateGroups)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankStateGroups object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankStateGroups object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankStateGroups object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankStateGroups obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankStateGroups);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankStateGroups obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankStateGroups LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup : NameID
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates> statesField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup()
        {
            this.statesField = new List<SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates>();
        }

        [System.Xml.Serialization.XmlElementAttribute("States")]
        public List<SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates> States
        {
            get
            {
                return this.statesField;
            }
            set
            {
                this.statesField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState> stateField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates()
        {
            this.stateField = new List<SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState>();
        }

        [System.Xml.Serialization.XmlElementAttribute("State")]
        public List<SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState> State
        {
            get
            {
                return this.stateField;
            }
            set
            {
                this.stateField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStates LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState : NameID
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankStateGroupsStateGroupStatesState LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankSwitchGroups
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup> switchGroupField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankSwitchGroups()
        {
            this.switchGroupField = new List<SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup>();
        }

        [System.Xml.Serialization.XmlElementAttribute("SwitchGroup")]
        public List<SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup> SwitchGroup
        {
            get
            {
                return this.switchGroupField;
            }
            set
            {
                this.switchGroupField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankSwitchGroups));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankSwitchGroups object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankSwitchGroups object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankSwitchGroups object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankSwitchGroups obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankSwitchGroups);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankSwitchGroups obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankSwitchGroups Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankSwitchGroups)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankSwitchGroups Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankSwitchGroups)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankSwitchGroups object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankSwitchGroups object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankSwitchGroups object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankSwitchGroups obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankSwitchGroups);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankSwitchGroups obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankSwitchGroups LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup : NameID
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches> switchesField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup()
        {
            this.switchesField = new List<SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Switches")]
        public List<SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches> Switches
        {
            get
            {
                return this.switchesField;
            }
            set
            {
                this.switchesField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch> switchField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches()
        {
            this.switchField = new List<SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Switch")]
        public List<SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch> Switch
        {
            get
            {
                return this.switchField;
            }
            set
            {
                this.switchField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitches LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch : NameID
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankSwitchGroupsSwitchGroupSwitchesSwitch LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankTriggers
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankTriggersTrigger> triggerField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankTriggers()
        {
            this.triggerField = new List<SoundBanksInfoSoundBanksSoundBankTriggersTrigger>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Trigger")]
        public List<SoundBanksInfoSoundBanksSoundBankTriggersTrigger> Trigger
        {
            get
            {
                return this.triggerField;
            }
            set
            {
                this.triggerField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankTriggers));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankTriggers object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankTriggers object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankTriggers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankTriggers obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankTriggers);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankTriggers obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankTriggers Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankTriggers)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankTriggers Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankTriggers)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankTriggers object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankTriggers object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankTriggers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankTriggers obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankTriggers);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankTriggers obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankTriggers LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankTriggersTrigger : NameID
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankTriggersTrigger));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankTriggersTrigger object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankTriggersTrigger object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankTriggersTrigger object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankTriggersTrigger obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankTriggersTrigger);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankTriggersTrigger obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankTriggersTrigger Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankTriggersTrigger)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankTriggersTrigger Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankTriggersTrigger)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankTriggersTrigger object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankTriggersTrigger object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankTriggersTrigger object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankTriggersTrigger obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankTriggersTrigger);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankTriggersTrigger obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankTriggersTrigger LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankExternalSources
    {

        #region Private fields
        private List<SoundBanksInfoSoundBanksSoundBankExternalSourcesSource> sourceField;

        private static XmlSerializer serializer;
        #endregion

        public SoundBanksInfoSoundBanksSoundBankExternalSources()
        {
            this.sourceField = new List<SoundBanksInfoSoundBanksSoundBankExternalSourcesSource>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Source")]
        public List<SoundBanksInfoSoundBanksSoundBankExternalSourcesSource> Source
        {
            get
            {
                return this.sourceField;
            }
            set
            {
                this.sourceField = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankExternalSources));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankExternalSources object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankExternalSources object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankExternalSources object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankExternalSources obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankExternalSources);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankExternalSources obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankExternalSources Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankExternalSources)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankExternalSources Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankExternalSources)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankExternalSources object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankExternalSources object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankExternalSources object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankExternalSources obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankExternalSources);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankExternalSources obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SoundBanksInfoSoundBanksSoundBankExternalSources LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class SoundBanksInfoSoundBanksSoundBankExternalSourcesSource : NameID
    {

        #region Private fields
        private static XmlSerializer serializer;
        #endregion

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SoundBanksInfoSoundBanksSoundBankExternalSourcesSource));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankExternalSourcesSource object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoundBanksInfoSoundBanksSoundBankExternalSourcesSource object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankExternalSourcesSource object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankExternalSourcesSource obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankExternalSourcesSource);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoundBanksInfoSoundBanksSoundBankExternalSourcesSource obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankExternalSourcesSource Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SoundBanksInfoSoundBanksSoundBankExternalSourcesSource)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoundBanksInfoSoundBanksSoundBankExternalSourcesSource Deserialize(System.IO.Stream s)
        {
            return ((SoundBanksInfoSoundBanksSoundBankExternalSourcesSource)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoundBanksInfoSoundBanksSoundBankExternalSourcesSource object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoundBanksInfoSoundBanksSoundBankExternalSourcesSource object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoundBanksInfoSoundBanksSoundBankExternalSourcesSource object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankExternalSourcesSource obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SoundBanksInfoSoundBanksSoundBankExternalSourcesSource);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoundBanksInfoSoundBanksSoundBankExternalSourcesSource obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoundBanksInfoSoundBanksSoundBankExternalSourcesSource LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum SoundBanksInfoBasePlatform
    {

        /// <remarks/>
        PS3,

        /// <remarks/>
        Wii,

        /// <remarks/>
        Windows,

        /// <remarks/>
        Xbox360,

        /// <remarks/>
        Mac,

        /// <remarks/>
        VitaSW,

        /// <remarks/>
        VitaHW,

        /// <remarks/>
        PS4,

        /// <remarks/>
        iOS,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3DS")]
        Item3DS,

        /// <remarks/>
        WiiUSW,

        /// <remarks/>
        WiiUHW,

        /// <remarks/>
        Android,

        /// <remarks/>
        XboxOne,

        /// <remarks/>
        Linux,

        /// <remarks/>
        Stadia,

        /// <remarks/>
        WindowsPhone,

        /// <remarks/>
        Switch,

        /// <remarks/>
        Lumin,

        /// <remarks/>
        Emscripten,

        /// <remarks/>
        PS5,

        /// <remarks/>
        XboxSeriesX,
    }
}
#pragma warning restore
